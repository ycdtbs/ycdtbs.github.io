<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java开发的截图直接上传对象存储</title>
    <link href="/2022/05/24/Java%E5%BC%80%E5%8F%91%E7%9A%84%E6%88%AA%E5%9B%BE%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    <url>/2022/05/24/Java%E5%BC%80%E5%8F%91%E7%9A%84%E6%88%AA%E5%9B%BE%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="Java截图工具直接上传到阿里云对象存储"><a href="#Java截图工具直接上传到阿里云对象存储" class="headerlink" title="Java截图工具直接上传到阿里云对象存储"></a>Java截图工具直接上传到阿里云对象存储</h4><p>   经常使用markdown编写博客或者文档的朋友们应该知道，需要上传照片到图床是一个很麻烦的时候，我们需要保存图片，然后上传到图床，然后复制地址放入markdown文件当中，市面上支持直接从剪贴板中插入文件的图床几乎都收费且价格很不划算，因此开发了一个工具，截图后直接上传到阿里云对象存储，并将返回的地址存入剪贴板直接使用。<br>Github：<a href="https://github.com/ycdtbs/imagebed">https://github.com/ycdtbs/imagebed</a></p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p>对源码不感兴趣的朋友可以直接下载压缩包修改配置文件</p><p><img src="https://facesearch-hoom.oss-cn-hangzhou.aliyuncs.com/face/09c57784-145a-4a9c-a3e5-ec3e13f45e60.jpg"></p><p>修改config中的文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">endpoint:</span> <span class="hljs-comment"># 阿里云的节点地址</span><br>  <span class="hljs-attr">keyid:</span>  <span class="hljs-comment"># 填写刚刚生成的AccessKey</span><br>  <span class="hljs-attr">keysecret:</span>   <span class="hljs-comment"># 填写刚刚生成的Accesssecret</span><br>  <span class="hljs-attr">bucketname:</span>  <span class="hljs-comment"># bucket名称</span><br>  <span class="hljs-attr">filehost:</span>     <span class="hljs-comment">#bucket下文件夹的路径</span><br></code></pre></td></tr></table></figure><p>点击bat运行软件（需要java环境）</p><p><img src="https://facesearch-hoom.oss-cn-hangzhou.aliyuncs.com/face/aabd700a-55e6-4417-83a2-5e86cbd9a17b.jpg"></p><p>x @Componentpublic class Setingmodel {    private String imgpath;    private String GroupID;    private String UserID;    private String Quality_Control;    private String Image_Type;    private String Liveness_Control;    private String Userinf;​    public String getUserinf() {        return Userinf;    }​    public void setUserinf(String userinf) {        Userinf &#x3D; userinf;    }​    public Setingmodel() {        &#x2F;**         * 图片类型         * BASE64:图片的base64值，base64编码后的图片数据，编码后的图片大小不超过2M；         * URL:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)；         * FACE_TOKEN：人脸图片的唯一标识，调用人脸检测接口时         * 会为每个人脸图片赋予一个唯一的FACE_TOKEN         * 同一张图片多次检测得到的FACE_TOKEN是同一个。         <em>&#x2F;        this.Image_Type &#x3D; “BASE64”;        &#x2F;</em>*         * 图片质量控制         * NONE: 不进行控制         * LOW:较低的质量要求         * NORMAL: 一般的质量要求         * HIGH: 较高的质量要求         * 默认 NONE         <em>&#x2F;        this.Quality_Control &#x3D; “NONE”;        &#x2F;</em>*         * 活体检测控制         * NONE: 不进行控制         * LOW:较低的活体要求(高通过率 低攻击拒绝率)         * NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率)         * HIGH: 较高的活体要求(高攻击拒绝率 低通过率)         * 默认NONE         *&#x2F;        this.Liveness_Control &#x3D; “NONE”;    }​    public String getImgpath() {        return imgpath;    }​    public void setImgpath(String imgpath) {        this.imgpath &#x3D; imgpath;    }​    public String getGroupID() {        return GroupID;    }​    public void setGroupID(String groupID) {        GroupID &#x3D; groupID;    }​    public String getUserID() {        return UserID;    }​    public void setUserID(String userID) {        UserID &#x3D; userID;    }​    public String getQuality_Control() {        return Quality_Control;    }​    public void setQuality_Control(String quality_Control) {        Quality_Control &#x3D; quality_Control;    }​    public String getImage_Type() {        return Image_Type;    }​    public void setImage_Type(String image_Type) {        Image_Type &#x3D; image_Type;    }​    public String getLiveness_Control() {        return Liveness_Control;    }​    public void setLiveness_Control(String liveness_Control) {        Liveness_Control &#x3D; liveness_Control;    }}java</p>]]></content>
    
    
    <categories>
      
      <category>小工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java GUI编程</tag>
      
      <tag>小工具开发</tag>
      
      <tag>开源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Milvues向量搜索引擎的大规模人脸识别</title>
    <link href="/2022/05/18/%E5%9F%BA%E4%BA%8EMilvues%E5%90%91%E9%87%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E5%A4%A7%E8%A7%84%E6%A8%A1%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    <url>/2022/05/18/%E5%9F%BA%E4%BA%8EMilvues%E5%90%91%E9%87%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E5%A4%A7%E8%A7%84%E6%A8%A1%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot-基于向量搜索引擎及虹软人脸识别SDK的大规模人脸搜索"><a href="#SpringBoot-基于向量搜索引擎及虹软人脸识别SDK的大规模人脸搜索" class="headerlink" title="SpringBoot 基于向量搜索引擎及虹软人脸识别SDK的大规模人脸搜索"></a>SpringBoot 基于向量搜索引擎及虹软人脸识别SDK的大规模人脸搜索</h3><p>[TOC]</p><h4 id="在线环境demo"><a href="#在线环境demo" class="headerlink" title="在线环境demo"></a>在线环境demo</h4><p>​    为了方便大家测试效果，开放了一个在线环境供大家测试并降低了识别门槛和难度，使得照片也可以通过筛选，大家使用前无比观看视频，按照视频方式操作。由于服务器昂贵，资源有限，生产环境的配置为2C 8G，所以服务比较慢用户体验一般，若想测试性能，请在本地部署</p><p>视频地址:<a href="https://space.bilibili.com/97483909">https://space.bilibili.com/97483909</a></p><p>在线环境(演示):<a href="http://120.48.10.164:9528/">http://120.48.10.164:9528/</a> admin 123456</p><p>联系我：<a href="mailto:&#x79;&#99;&#x64;&#x74;&#x62;&#115;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;">&#x79;&#99;&#x64;&#x74;&#x62;&#115;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;</a> </p><h5 id="在线环境说明"><a href="#在线环境说明" class="headerlink" title="在线环境说明"></a>在线环境说明</h5><p>在线环境会收集大家数据，请勿上传敏感照片，项目测试数据集均来源于网络公开照片，利用Python脚本爬取，脚本存放于目录中</p><p><strong>在线环境仅用于演示 请勿上传自己数据</strong> </p><p><strong>在线环境仅用于演示 请勿上传自己数据</strong> </p><p><strong>在线环境仅用于演示 请勿上传自己数据</strong> </p><p><strong>在线环境仅用于演示 请勿上传自己数据</strong> </p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​       大四毕业时做毕业设计，用到了百度云人脸识别的API,当时制作了一个demo发到Bilibli上，之后不少同学来问我，于是制作了一个利用虹软SDK的人脸识别的包含人脸库管理的一套服务，一年半来有不少朋友前来咨询人脸识别相关的问题，由于博主本人工作业务不涉及这部分，所以一直无心研究。最近北京疫情在家有了一些时间，利用了几天时间完善了基于虹软的代码。</p><p>​       首先说明一下上个版本的缺陷是什么，首先之前的人脸数据缓存在了Redis当中，当我们解析出特征值时，将数据缓存到redis中，进行逐个必对和判断，<strong>优化的方式也只是单纯的利用多线程和虹软的人基本特征（性别、年龄）</strong>等进行分库，几百个人脸时还好，在上千个人脸时就会出现非常明显的延迟，用户体验效率非常低，因此基于上个版本只满足部分同学的毕业设计、小组作业的场景。偶然在工作中了解到了向量搜索引擎，于是考虑是否可以结合虹软的人脸识别SDK提取特征向量，然后进行分析处理。由于这个demo主要是搭建一个大规模人脸搜索和识别服务的demo，因此没有工程化，系统设计的也比较冗余，没有详细的功能设计，基本是博主想到什么做什么。最后跪求一个 <strong>STAR</strong> 重要的事情说三遍 <strong>STAR STAR STAR</strong></p><h4 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h4><p><img src="https://chengpicture.oss-cn-beijing.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE.png"></p><h4 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h4><p>​       系统功能模块较为简单，主要功能就是<strong>新增人脸</strong>和<strong>人脸搜索</strong>两个功能，其中新增人脸使用页面上传和压缩包批量上传两个方式，压缩包上传时文件名称为用户名，下面主要说明人脸搜索的功能流程</p><h5 id="Milvues"><a href="#Milvues" class="headerlink" title="Milvues"></a>Milvues</h5><p>​       在介绍前需要说明一下Mulvus</p><p>​       Milvus 向量数据库能够帮助用户轻松应对海量非结构化数据（图片 &#x2F; 视频 &#x2F; 语音 &#x2F; 文本）检索。单节点 Milvus 可以在秒内完成十亿级的向量搜索</p><p>​       因此虹软的SDK只能提取向量及对比的功能，在大规模人脸识别中，需要搜索引擎对于人脸数据进行初步筛选到一个较小的范围后在利用虹软的SDK进行测试，值得一提的是，博主多次测试后Milvues返回的匹配率足以满足人脸匹配的要求，Milvus的安装部署和使用文档参考 <a href="https://milvus.io/cn/docs/v2.0.x">https://milvus.io/cn/docs/v2.0.x</a></p><p>​       <strong>特别说明的是</strong>虹软提取的数组是一个经过归一后的1032长度的byte数组，我们需要对数组进行转换，去除前8位的版本号，并将1024长度的byte转为256长度的float向量，这部分可以利用Arrays提供的方法进行转换，代码中也有相应的工具类</p><h5 id="人脸上传（单张）"><a href="#人脸上传（单张）" class="headerlink" title="人脸上传（单张）"></a>人脸上传（单张）</h5><p><img src="https://chengpicture.oss-cn-beijing.aliyuncs.com/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png"></p><h5 id="人脸上传（批量）"><a href="#人脸上传（批量）" class="headerlink" title="人脸上传（批量）"></a>人脸上传（批量）</h5><p>​       批量上传采用本地打包压缩上传到服务器，后台进程进行解压，放到队列中处理，处理结果存储在ES数据库中，实时结果及处理进度通过Websocket发送至前台</p><p>​       <img src="https://chengpicture.oss-cn-beijing.aliyuncs.com/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20%281%29.png"></p><h5 id="人脸搜索"><a href="#人脸搜索" class="headerlink" title="人脸搜索"></a>人脸搜索</h5><p><img src="https://chengpicture.oss-cn-beijing.aliyuncs.com/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20%282%29.png"></p><h4 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h4><h5 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h5><p>​       前端使用了Vue admin temlate 及 Element UI</p><h5 id="后端框架"><a href="#后端框架" class="headerlink" title="后端框架"></a>后端框架</h5><p>​       后端框架主要是SpringBoot</p><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><ul><li>mysql：存储用户信息，所有的数据以Mysql数据为准</li><li>Elasticsearch：由于批量上传操作是异步的，用ES来收集日志并分析热点数据、成功数据、失败数据（当前版本未实现）</li><li>InfluxDB：用于涉及到数据源较多，事务处理过于麻烦，架构设计中以Mysql中的数据为准，以Mysql数据进行数据同步</li><li>阿里云OSS：负责存储裁切后的人脸照片，负责前台展示及缓存失效时重新加载</li><li>Milvues：<strong>项目的核心数据库向量搜索引擎</strong></li></ul><h5 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h5><ul><li>ActiveMq：由于大规模人脸搜索服务需要大量的照片,一个个手动上传不现实，因此开发了批量上传的功能，需要ActiveMq进行异步上传</li></ul><h5 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h5><ul><li>restful：前后端交互主要使用restful接口</li><li>websocket：负责将后端处理照片的过程及照片实时显示在前端</li></ul><h4 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h4><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><ul><li><p>.env.development 文件配置后端交互地址，<strong>只需要修改所有的IP+端口</strong> 其他路径不要改变</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># just a flag</span><br><span class="hljs-attr">ENV</span> = <span class="hljs-string">&#x27;development&#x27;</span><br><span class="hljs-comment"># base api</span><br><span class="hljs-attr">VUE_APP_BASE_API</span> = <span class="hljs-string">&#x27;http://127.0.0.1:8080/&#x27; </span><br><span class="hljs-comment">#VUE_APP_BASE_API = &#x27;http://120.48.10.164:8080/&#x27;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># uploadFile</span><br><span class="hljs-attr">VUE_APP_BASE_API_UPFILE</span> = <span class="hljs-string">&#x27;http://127.0.0.1:8080/file/getImageUrl&#x27;</span><br><br><span class="hljs-attr">VUE_APP_BASE_API_UPFILE_LIST</span> = <span class="hljs-string">&#x27;http://127.0.0.1:8080/file/getListImageUrl&#x27;</span><br><br><span class="hljs-attr">VUE_APP_BASE_API_WEBSOCKET</span> = <span class="hljs-string">&#x27;ws://127.0.0.1:8080/api/pushMessage/&#x27;</span><br><br><span class="hljs-attr">VUE_APP_BASE_API_UPFILE</span> = <span class="hljs-string">&#x27;http://120.48.10.164:8080/file/getImageUrl&#x27;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#VUE_APP_BASE_API_UPFILE_LIST = &#x27;http://120.48.10.164:8080/file/getListImageUrl&#x27;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#VUE_APP_BASE_API_WEBSOCKET = &#x27;ws://120.48.10.164:8080/api/pushMessage/&#x27;</span><br></code></pre></td></tr></table></figure><p>VUE_APP_BASE_API：后端服务接口</p><p>VUE_APP_BASE_API_UPFILE：单个文件上传地址</p><p>VUE_APP_BASE_API_UPFILE_LIST：文件列表上传地址</p><p>VUE_APP_BASE_API_WEBSOCKET：Websocket地址</p></li><li><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br>npm run dev<br>服务端口：ip:9528<br></code></pre></td></tr></table></figure></li></ul><h5 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h5><ul><li>application.yml 主要是服务地址<ul><li>修改Redis配置</li><li>修改Mysql配置</li><li>修改ActiveMq配置</li><li>修改Milvues配置</li><li>修改阿里云对象存储地址</li><li>uploadFile配置本地缓存路径，主要是压缩包上传时需要用到</li></ul></li><li>FaceEngineConfig 类<ul><li>配置虹软SDK的APID、SK，引擎地址</li></ul></li></ul><h5 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h5><ul><li>mysql</li><li>redis</li><li>activeMq</li><li>Elasticsearch（此版本不用安装）</li><li>InfluxDB（此版本不用安装）</li><li>Milvus</li></ul><h5 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库"></a>数据库</h5><ul><li>执行face.sql</li></ul><h5 id="人脸数据"><a href="#人脸数据" class="headerlink" title="人脸数据"></a>人脸数据</h5><ul><li>利用python脚本自行爬取</li></ul><h4 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h4><h5 id="FaceEngineConfig-类"><a href="#FaceEngineConfig-类" class="headerlink" title="FaceEngineConfig 类"></a>FaceEngineConfig 类</h5><blockquote><p>类的主要功能是配置faceEngine的认证配置信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">FaceEngineConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">APPID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SDKKEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//public static final String SDKKEY = &quot;&quot;;//linux</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LIB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\face_web\\ArcSoft_ArcFace_Java_Windows_x64_V3.0\\libs\\WIN64&quot;</span>;<br>    <span class="hljs-comment">//public static final String LIB = &quot;&quot;; // linux</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="FaceEnginePoolFactory-引擎对象工厂类"><a href="#FaceEnginePoolFactory-引擎对象工厂类" class="headerlink" title="FaceEnginePoolFactory 引擎对象工厂类"></a>FaceEnginePoolFactory 引擎对象工厂类</h5><blockquote><p>引擎对象工厂类，负责维护一个对象池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log4j2</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FaceEnginePoolFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BasePooledObjectFactory</span>&lt;FaceEngine&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在对象池中创建对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> FaceEngine <span class="hljs-title function_">create</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FaceEngine</span> <span class="hljs-variable">faceEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceEngine</span>(FaceEngineConfig.LIB);<br>        <span class="hljs-comment">//激活引擎</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">errorCode</span> <span class="hljs-operator">=</span> faceEngine.activeOnline(FaceEngineConfig.APPID, FaceEngineConfig.SDKKEY);<br>        <span class="hljs-keyword">if</span> (errorCode != ErrorInfo.MOK.getValue() &amp;&amp; errorCode != ErrorInfo.MERR_ASF_ALREADY_ACTIVATED.getValue()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;引擎激活失败&quot;</span>);<br>        &#125;<br>        ActiveFileInfo activeFileInfo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveFileInfo</span>();<br>        errorCode = faceEngine.getActiveFileInfo(activeFileInfo);<br>        <span class="hljs-keyword">if</span> (errorCode != ErrorInfo.MOK.getValue() &amp;&amp; errorCode != ErrorInfo.MERR_ASF_ALREADY_ACTIVATED.getValue()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;获取激活文件信息失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//引擎配置</span><br>        <span class="hljs-type">EngineConfiguration</span> <span class="hljs-variable">engineConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EngineConfiguration</span>();<br>        engineConfiguration.setDetectMode(DetectMode.ASF_DETECT_MODE_IMAGE);<br>        engineConfiguration.setDetectFaceOrientPriority(DetectOrient.ASF_OP_ALL_OUT);<br>        engineConfiguration.setDetectFaceMaxNum(<span class="hljs-number">10</span>);<br>        engineConfiguration.setDetectFaceScaleVal(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">//功能配置</span><br>        <span class="hljs-type">FunctionConfiguration</span> <span class="hljs-variable">functionConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionConfiguration</span>();<br>        functionConfiguration.setSupportAge(<span class="hljs-literal">true</span>);<br>        functionConfiguration.setSupportFace3dAngle(<span class="hljs-literal">true</span>);<br>        functionConfiguration.setSupportFaceDetect(<span class="hljs-literal">true</span>);<br>        functionConfiguration.setSupportFaceRecognition(<span class="hljs-literal">true</span>);<br>        functionConfiguration.setSupportGender(<span class="hljs-literal">true</span>);<br>        functionConfiguration.setSupportLiveness(<span class="hljs-literal">true</span>);<br>        functionConfiguration.setSupportIRLiveness(<span class="hljs-literal">true</span>);<br>        engineConfiguration.setFunctionConfiguration(functionConfiguration);<br>        <span class="hljs-comment">//初始化引擎</span><br>        errorCode = faceEngine.init(engineConfiguration);<br><br>        <span class="hljs-keyword">if</span> (errorCode != ErrorInfo.MOK.getValue()) &#123;<br>            log.error(<span class="hljs-string">&quot;初始化引擎失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> faceEngine;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 包装对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> faceEngine</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PooledObject&lt;FaceEngine&gt; <span class="hljs-title function_">wrap</span><span class="hljs-params">(FaceEngine faceEngine)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPooledObject</span>&lt;&gt;(faceEngine);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销毁对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> faceEngine 对象池</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception 异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyObject</span><span class="hljs-params">(PooledObject&lt;FaceEngine&gt; faceEngine)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>.destroyObject(faceEngine);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验对象是否可用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> faceEngine 对象池</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对象是否可用结果，boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateObject</span><span class="hljs-params">(PooledObject&lt;FaceEngine&gt; faceEngine)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.validateObject(faceEngine);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 激活钝化的对象系列操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> faceEngine 对象池</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception 异常信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">activateObject</span><span class="hljs-params">(PooledObject&lt;FaceEngine&gt; faceEngine)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>.activateObject(faceEngine);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 钝化未使用的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> faceEngine 对象池</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception 异常信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">passivateObject</span><span class="hljs-params">(PooledObject&lt;FaceEngine&gt; faceEngine)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>.passivateObject(faceEngine);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="faceUtils-人脸识别工具类"><a href="#faceUtils-人脸识别工具类" class="headerlink" title="faceUtils 人脸识别工具类"></a>faceUtils 人脸识别工具类</h5><blockquote><p>核心的人脸识别类，负责提取特征值、截取人脸、特征值对比</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">faceUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> GenericObjectPool&lt;FaceEngine&gt; faceEngineGenericObjectPool;<br>    faceUtils()&#123;<br>        <span class="hljs-comment">// 对象池工厂</span><br>        <span class="hljs-type">FaceEnginePoolFactory</span> <span class="hljs-variable">personPoolFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceEnginePoolFactory</span>();<br>        <span class="hljs-comment">// 对象池配置</span><br>        GenericObjectPoolConfig&lt;FaceEngine&gt; objectPoolConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericObjectPoolConfig</span>&lt;&gt;();<br>        objectPoolConfig.setMaxTotal(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">AbandonedConfig</span> <span class="hljs-variable">abandonedConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbandonedConfig</span>();<br><br>        abandonedConfig.setRemoveAbandonedOnMaintenance(<span class="hljs-literal">true</span>); <span class="hljs-comment">//在Maintenance的时候检查是否有泄漏</span><br><br>        abandonedConfig.setRemoveAbandonedOnBorrow(<span class="hljs-literal">true</span>); <span class="hljs-comment">//borrow 的时候检查泄漏</span><br><br>        abandonedConfig.setRemoveAbandonedTimeout(<span class="hljs-number">10</span>); <span class="hljs-comment">//如果一个对象borrow之后10秒还没有返还给pool，认为是泄漏的对象</span><br><br>        <span class="hljs-comment">// 对象池</span><br>        faceEngineGenericObjectPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericObjectPool</span>&lt;&gt;(personPoolFactory, objectPoolConfig);<br>        faceEngineGenericObjectPool.setAbandonedConfig(abandonedConfig);<br>        faceEngineGenericObjectPool.setTimeBetweenEvictionRunsMillis(<span class="hljs-number">5000</span>); <span class="hljs-comment">//5秒运行一次维护任务</span><br>        log.info(<span class="hljs-string">&quot;引擎池开启成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 人脸检测</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileInputStream</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span>  List&lt;FaceInfo&gt; <span class="hljs-title function_">faceFind</span><span class="hljs-params">(InputStream fileInputStream)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FaceEngine</span> <span class="hljs-variable">faceEngine</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            faceEngine = faceEngineGenericObjectPool.borrowObject();<br>            <span class="hljs-type">ImageInfo</span> <span class="hljs-variable">imageInfo</span> <span class="hljs-operator">=</span> getRGBData(fileInputStream);<br>            List&lt;FaceInfo&gt; faceInfoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;FaceInfo&gt;();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">errorCode</span> <span class="hljs-operator">=</span> faceEngine.detectFaces(imageInfo.getImageData(), imageInfo.getWidth(), imageInfo.getHeight(), imageInfo.getImageFormat(), faceInfoList);<br>            <span class="hljs-keyword">return</span> faceInfoList;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;出现了异常&quot;</span>);<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;FaceInfo&gt;();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            fileInputStream.close();<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (faceEngine != <span class="hljs-literal">null</span>) &#123;<br>                faceEngineGenericObjectPool.returnObject(faceEngine);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 人脸截取</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileInputStream</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rect</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span>  String <span class="hljs-title function_">faceCrop</span><span class="hljs-params">(InputStream fileInputStream, Rect rect)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">bufImage</span> <span class="hljs-operator">=</span> ImageIO.read(fileInputStream);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> bufImage.getHeight();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> bufImage.getWidth();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> rect.getTop();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bottom</span> <span class="hljs-operator">=</span> rect.getBottom();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> rect.getLeft();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> rect.getRight();<br>            <span class="hljs-comment">//System.out.println(top + &quot;-&quot; + bottom + &quot;-&quot; + left + &quot;-&quot; + right);</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">subimage</span> <span class="hljs-operator">=</span> bufImage.getSubimage(left, top, right - left, bottom - left);<br>                ImageIO.write(subimage, <span class="hljs-string">&quot;png&quot;</span>, stream);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.encode(stream.toByteArray());<br>                <span class="hljs-keyword">return</span> base64;<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                stream.close();<br>                fileInputStream.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 人脸特征值提取</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] faceFeature(InputStream fileInputStream,FaceInfo faceInfo) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FaceEngine</span> <span class="hljs-variable">faceEngine</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FaceFeature</span> <span class="hljs-variable">faceFeature</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceFeature</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            faceEngine = faceEngineGenericObjectPool.borrowObject();<br>            <span class="hljs-type">ImageInfo</span> <span class="hljs-variable">imageInfo</span> <span class="hljs-operator">=</span> getRGBData(fileInputStream);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">errorCode</span> <span class="hljs-operator">=</span> faceEngine.extractFaceFeature(imageInfo.getImageData(), imageInfo.getWidth(), imageInfo.getHeight(), imageInfo.getImageFormat(), faceInfo, faceFeature);<br>            <span class="hljs-type">byte</span>[] featureData = faceFeature.getFeatureData();<br>            <span class="hljs-keyword">return</span> featureData;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;出现了异常&quot;</span>);<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            fileInputStream.close();<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (faceEngine != <span class="hljs-literal">null</span>) &#123;<br>                faceEngineGenericObjectPool.returnObject(faceEngine);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 人脸对比</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">faceCompared</span><span class="hljs-params">(<span class="hljs-type">byte</span> [] source,<span class="hljs-type">byte</span> [] des)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FaceEngine</span> <span class="hljs-variable">faceEngine</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            faceEngine = faceEngineGenericObjectPool.borrowObject();<br>            <span class="hljs-type">FaceFeature</span> <span class="hljs-variable">targetFaceFeature</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceFeature</span>();<br>            targetFaceFeature.setFeatureData(source);<br>            <span class="hljs-type">FaceFeature</span> <span class="hljs-variable">sourceFaceFeature</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceFeature</span>();<br>            sourceFaceFeature.setFeatureData(des);<br>            <span class="hljs-type">FaceSimilar</span> <span class="hljs-variable">faceSimilar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceSimilar</span>();<br>            faceEngine.compareFaceFeature(targetFaceFeature, sourceFaceFeature, faceSimilar);<br>            <span class="hljs-type">float</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> faceSimilar.getScore();<br>            <span class="hljs-keyword">return</span> score;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;出现了异常&quot;</span>);<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (faceEngine != <span class="hljs-literal">null</span>) &#123;<br>                faceEngineGenericObjectPool.returnObject(faceEngine);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="milvusOperateUtils-Milvues工具类"><a href="#milvusOperateUtils-Milvues工具类" class="headerlink" title="milvusOperateUtils Milvues工具类"></a>milvusOperateUtils Milvues工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">milvusOperateUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> GenericObjectPool&lt;MilvusServiceClient&gt; milvusServiceClientGenericObjectPool;  <span class="hljs-comment">// 管理链接对象的池子</span><br>    <span class="hljs-comment">// https://milvus.io/cn/docs/v2.0.x/load_collection.md</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_POOL_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">milvusOperateUtils</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 私有构造方法创建一个池</span><br>        <span class="hljs-comment">// 对象池工厂</span><br>        <span class="hljs-type">MilvusPoolFactory</span> <span class="hljs-variable">milvusPoolFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MilvusPoolFactory</span>();<br>        <span class="hljs-comment">// 对象池配置</span><br>        GenericObjectPoolConfig&lt;FaceEngine&gt; objectPoolConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericObjectPoolConfig</span>&lt;&gt;();<br>        objectPoolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        <span class="hljs-type">AbandonedConfig</span> <span class="hljs-variable">abandonedConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbandonedConfig</span>();<br><br>        abandonedConfig.setRemoveAbandonedOnMaintenance(<span class="hljs-literal">true</span>); <span class="hljs-comment">//在Maintenance的时候检查是否有泄漏</span><br><br>        abandonedConfig.setRemoveAbandonedOnBorrow(<span class="hljs-literal">true</span>); <span class="hljs-comment">//borrow 的时候检查泄漏</span><br><br>        abandonedConfig.setRemoveAbandonedTimeout(MAX_POOL_SIZE); <span class="hljs-comment">//如果一个对象borrow之后10秒还没有返还给pool，认为是泄漏的对象</span><br><br>        <span class="hljs-comment">// 对象池</span><br>        milvusServiceClientGenericObjectPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericObjectPool</span>(milvusPoolFactory, objectPoolConfig);<br>        milvusServiceClientGenericObjectPool.setAbandonedConfig(abandonedConfig);<br>        milvusServiceClientGenericObjectPool.setTimeBetweenEvictionRunsMillis(<span class="hljs-number">5000</span>); <span class="hljs-comment">//5秒运行一次维护任务</span><br>        log.info(<span class="hljs-string">&quot;milvus 对象池创建成功 维护了&quot;</span> + MAX_POOL_SIZE + <span class="hljs-string">&quot;个对象&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 创建一个Collection 类似于创建关系型数据库中的一张表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createCollection</span><span class="hljs-params">(String collection)</span> &#123;<br>        <span class="hljs-type">MilvusServiceClient</span> <span class="hljs-variable">milvusServiceClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 通过对象池管理对象</span><br>            milvusServiceClient = milvusServiceClientGenericObjectPool.borrowObject();<br>            <span class="hljs-type">FieldType</span> <span class="hljs-variable">fieldType1</span> <span class="hljs-operator">=</span> FieldType.newBuilder()<br>                    .withName(faceMilvus.Field.USER_NAME)<br>                    .withDescription(<span class="hljs-string">&quot;用户名&quot;</span>)<br>                    .withDataType(DataType.Int64)<br>                    .build();<br>            <span class="hljs-type">FieldType</span> <span class="hljs-variable">fieldType2</span> <span class="hljs-operator">=</span> FieldType.newBuilder()<br>                    .withName(faceMilvus.Field.USER_CODE)<br>                    .withDescription(<span class="hljs-string">&quot;编号&quot;</span>)<br>                    .withDataType(DataType.Int64)<br>                    .withPrimaryKey(<span class="hljs-literal">true</span>)<br>                    .withAutoID(<span class="hljs-literal">false</span>)<br>                    .build();<br>            <span class="hljs-type">FieldType</span> <span class="hljs-variable">fieldType3</span> <span class="hljs-operator">=</span> FieldType.newBuilder()<br>                    .withName(faceMilvus.Field.FEATURE)<br>                    .withDescription(<span class="hljs-string">&quot;特征向量&quot;</span>)<br>                    .withDataType(DataType.FloatVector)<br>                    .withDimension(faceMilvus.FEATURE_DIM)<br>                    .build();<br>            <span class="hljs-type">CreateCollectionParam</span> <span class="hljs-variable">createCollectionReq</span> <span class="hljs-operator">=</span> CreateCollectionParam.newBuilder()<br>                    .withCollectionName(collection)<br>                    .withDescription(<span class="hljs-string">&quot;人脸特征向量库&quot;</span>)<br>                    .withShardsNum(<span class="hljs-number">2</span>)<br>                    .addFieldType(fieldType2)<br>                    .addFieldType(fieldType1)<br>                    .addFieldType(fieldType3)<br>                    .build();<br>            R&lt;RpcStatus&gt; result = milvusServiceClient.createCollection(createCollectionReq);<br>            log.info(<span class="hljs-string">&quot;创建结果&quot;</span> + result.getStatus() + <span class="hljs-string">&quot;0 为成功&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (milvusServiceClient != <span class="hljs-literal">null</span>) &#123;<br>                milvusServiceClientGenericObjectPool.returnObject(milvusServiceClient);<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadingLocation</span><span class="hljs-params">(String collection)</span> &#123;<br>        <span class="hljs-type">MilvusServiceClient</span> <span class="hljs-variable">milvusServiceClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 通过对象池管理对象</span><br>            milvusServiceClient = milvusServiceClientGenericObjectPool.borrowObject();<br>            R&lt;RpcStatus&gt; rpcStatusR = milvusServiceClient.loadCollection(<br>                    LoadCollectionParam.newBuilder()<br>                            .withCollectionName(collection)<br>                            .build());<br>            log.info(<span class="hljs-string">&quot;加载结果&quot;</span> + rpcStatusR);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (milvusServiceClient != <span class="hljs-literal">null</span>) &#123;<br>                milvusServiceClientGenericObjectPool.returnObject(milvusServiceClient);<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">freedLoaction</span><span class="hljs-params">(String collection)</span> &#123;<br>        <span class="hljs-type">MilvusServiceClient</span> <span class="hljs-variable">milvusServiceClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 通过对象池管理对象</span><br>            milvusServiceClient = milvusServiceClientGenericObjectPool.borrowObject();<br>            R&lt;RpcStatus&gt; rpcStatusR = milvusServiceClient.releaseCollection(<br>                    ReleaseCollectionParam.newBuilder()<br>                            .withCollectionName(collection)<br>                            .build());<br>            log.info(<span class="hljs-string">&quot;加载结果&quot;</span> + rpcStatusR);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (milvusServiceClient != <span class="hljs-literal">null</span>) &#123;<br>                milvusServiceClientGenericObjectPool.returnObject(milvusServiceClient);<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-comment">// 删除一个Collection</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delCollection</span><span class="hljs-params">(String collection)</span> &#123;<br>        <span class="hljs-type">MilvusServiceClient</span> <span class="hljs-variable">milvusServiceClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 通过对象池管理对象</span><br>            milvusServiceClient = milvusServiceClientGenericObjectPool.borrowObject();<br>            R&lt;RpcStatus&gt; book = milvusServiceClient.dropCollection(<br>                    DropCollectionParam.newBuilder()<br>                            .withCollectionName(collection)<br>                            .build());<br>            log.info(<span class="hljs-string">&quot;删除&quot;</span> + book.getStatus() + <span class="hljs-string">&quot; 0 为成功&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (milvusServiceClient != <span class="hljs-literal">null</span>) &#123;<br>                milvusServiceClientGenericObjectPool.returnObject(milvusServiceClient);<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-comment">// 插入数据 和对应的字段相同</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String collectionName, String partitionName, List&lt;Long&gt; userName, List&lt;Long&gt; userCode, List&lt;List&lt;Float&gt;&gt; feature)</span> &#123;<br>        <span class="hljs-type">MilvusServiceClient</span> <span class="hljs-variable">milvusServiceClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 通过对象池管理对象</span><br>            milvusServiceClient = milvusServiceClientGenericObjectPool.borrowObject();<br>            List&lt;InsertParam.Field&gt; fields = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            fields.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertParam</span>.Field(faceMilvus.Field.USER_NAME, DataType.Int64, userName));<br>            fields.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertParam</span>.Field(faceMilvus.Field.USER_CODE, DataType.Int64, userCode));<br>            fields.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertParam</span>.Field(faceMilvus.Field.FEATURE, DataType.FloatVector, feature));<br>            <span class="hljs-type">InsertParam</span> <span class="hljs-variable">insertParam</span> <span class="hljs-operator">=</span> InsertParam.newBuilder()<br>                    .withCollectionName(collectionName)<br>                    .withPartitionName(partitionName)<br>                    .withFields(fields)<br>                    .build();<br>            R&lt;MutationResult&gt; insertResult = milvusServiceClient.insert(insertParam);<br>            <span class="hljs-keyword">if</span> (insertResult.getStatus() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> insertResult.getData().getIDs().getIntId().getData(<span class="hljs-number">0</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                log.error(<span class="hljs-string">&quot;特征值上传失败 加入失败队列稍后重试&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (milvusServiceClient != <span class="hljs-literal">null</span>) &#123;<br>                milvusServiceClientGenericObjectPool.returnObject(milvusServiceClient);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据向量搜索数据</span><br>    <span class="hljs-keyword">public</span> List&lt;?&gt; searchByFeature(String collection,List&lt;List&lt;Float&gt;&gt; search_vectors) &#123;<br>        <span class="hljs-type">MilvusServiceClient</span> <span class="hljs-variable">milvusServiceClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 通过对象池管理对象</span><br>            milvusServiceClient = milvusServiceClientGenericObjectPool.borrowObject();<br>            List&lt;String&gt; search_output_fields = Arrays.asList(faceMilvus.Field.USER_CODE);<br>            <span class="hljs-type">SearchParam</span> <span class="hljs-variable">searchParam</span> <span class="hljs-operator">=</span> SearchParam.newBuilder()<br>                    .withCollectionName(collection)<br>                    .withPartitionNames(Arrays.asList(<span class="hljs-string">&quot;one&quot;</span>))<br>                    .withMetricType(MetricType.L2)<br>                    .withOutFields(search_output_fields)<br>                    .withTopK(faceMilvus.SEARCH_K)<br>                    .withVectors(search_vectors)<br>                    .withVectorFieldName(faceMilvus.Field.FEATURE)<br>                    .withParams(faceMilvus.SEARCH_PARAM)<br>                    .build();<br>            R&lt;SearchResults&gt; respSearch = milvusServiceClient.search(searchParam);<br>            <span class="hljs-keyword">if</span> (respSearch.getStatus() == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-type">SearchResultsWrapper</span> <span class="hljs-variable">wrapperSearch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchResultsWrapper</span>(respSearch.getData().getResults());<br>                List&lt;?&gt; fieldData = wrapperSearch.getFieldData(faceMilvus.Field.USER_CODE, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">return</span> fieldData;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 回收对象到对象池</span><br>            <span class="hljs-keyword">if</span> (milvusServiceClient != <span class="hljs-literal">null</span>) &#123;<br>                milvusServiceClientGenericObjectPool.returnObject(milvusServiceClient);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">milvusOperateUtils</span> <span class="hljs-variable">milvusOperateUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">milvusOperateUtils</span>();<br>        milvusOperateUtils.createCollection(<span class="hljs-string">&quot;face_home&quot;</span>);<br>        <span class="hljs-comment">//milvusOperateUtils.delCollection(&quot;&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h4><h5 id="虹软"><a href="#虹软" class="headerlink" title="虹软"></a>虹软</h5><p><a href="https://ai.arcsoft.com.cn/">https://ai.arcsoft.com.cn/</a></p><h5 id="Milvus"><a href="#Milvus" class="headerlink" title="Milvus"></a>Milvus</h5><p><a href="https://milvus.io/cn/docs/v2.0.x/create_collection.md">https://milvus.io/cn/docs/v2.0.x/create_collection.md</a></p>]]></content>
    
    
    <categories>
      
      <category>项目文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>人脸识别</tag>
      
      <tag>人脸搜索</tag>
      
      <tag>大规模人脸识别服务</tag>
      
      <tag>向量搜索引擎</tag>
      
      <tag>虹软</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发编程实战学习笔记（五）</title>
    <link href="/2021/12/24/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/12/24/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Java并发编程实战-保护性暂停"><a href="#Java并发编程实战-保护性暂停" class="headerlink" title="Java并发编程实战-保护性暂停"></a>Java并发编程实战-保护性暂停</h3><h5 id="1、wait和notify"><a href="#1、wait和notify" class="headerlink" title="1、wait和notify"></a>1、wait和notify</h5><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/wait%E5%92%8Cnotify.png"></p><p>在之前的学习中说到过，当线程获取到锁之后嫩owner会设置为当前线程，其他的线程进入到entryList中阻塞等待，但是如果线程一执行过程中没有满足条件，那么此时可以调用线程1的wait方法，将其放入到waitset中进行等待</p><ul><li>owner线程发现条件不满足运行时候，调用wait方法会放入到waitset中</li><li>block和wait都不会占用cpu的时间片</li><li>entrylist中的线程是block状态，当owner线程释放锁的时候就会被唤醒</li><li>waitset中的线程是wait状态，只有owner线程调用该notify唤醒的时候才会启动</li><li>waitset中的线程唤醒之后会进入enterlist一起竞争锁</li></ul><h5 id="2、相关API"><a href="#2、相关API" class="headerlink" title="2、相关API"></a>2、相关API</h5><ul><li>wait<ul><li>owner线程调用wait方法，线程进入到waitset中</li></ul></li><li>notify<ul><li>owner线程随机唤醒一个线程</li></ul></li><li>notifyAll<ul><li>owner线程唤醒所有线程</li></ul></li><li>wait(long n)<ul><li>有时间的等待，如果没有人唤醒就结束等待</li></ul></li></ul><p>注意的是，以上的所有方法是线程之间协作的手段，都必须是owner线程才可以调用的方法</p><p><strong>notify和notifyall的区别</strong>：notify是挑一个唤醒，notifyall是唤醒所有的线程</p><h5 id="3、sleep和wait的区别"><a href="#3、sleep和wait的区别" class="headerlink" title="3、sleep和wait的区别"></a>3、sleep和wait的区别</h5><ul><li>sleep是线程的静态方法，wait是object的方法</li><li>wait需要先获得对象锁，必须先要获得锁</li><li>sleep不会释放锁，wait会释放锁</li></ul><h5 id="4、保护性暂停-Guarded-Suspension"><a href="#4、保护性暂停-Guarded-Suspension" class="headerlink" title="4、保护性暂停 Guarded Suspension"></a>4、保护性暂停 Guarded Suspension</h5><p>保护性暂停用在一个线程等待另一个线程运行的结果</p><ul><li>使用要点<ul><li>如果一个结果需要从一个线程到另一个线程，那么让他们关联同一个GuardedObject</li><li>如果有结果不断从一个线程到另一个线程，请使用消息队列</li><li>join和feature的实现就是用的这个</li><li>因为要等待同步，所以这个是同步模式</li></ul></li></ul><h5 id="5、代码实现-简单模式"><a href="#5、代码实现-简单模式" class="headerlink" title="5、代码实现 简单模式"></a>5、代码实现 简单模式</h5><ul><li>get方法循环等待</li><li>set方法设置完毕后调用notifyall唤醒线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Guraede</span> <span class="hljs-variable">guraede</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Guraede</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>            System.out.println(<span class="hljs-string">&quot;创建了一个对象 10秒后赋值&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            guraede.setObject(o);<br>            System.out.println(<span class="hljs-string">&quot;执行了赋值&quot;</span>);<br>        &#125;);<br>        thread.start();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> guraede.getObject();<br>            <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;获取到了对象&quot;</span> + object.hashCode());<br>            &#125;<br><br>        &#125;);<br>        thread1.start();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Guraede</span>&#123;<br>    <span class="hljs-keyword">private</span> Object object;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了获取线程&quot;</span>);<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-keyword">while</span> (object == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;循环等待&quot;</span>);<br>                    <span class="hljs-built_in">this</span>.wait();<br>                    <span class="hljs-comment">//循环等待</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;拿到值了&quot;</span>);<br>            <span class="hljs-keyword">return</span> object;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObject</span><span class="hljs-params">(Object object)</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-built_in">this</span>.object = object;<br>            <span class="hljs-built_in">this</span>.notifyAll();<br>            System.out.println(<span class="hljs-string">&quot;唤醒等待线程&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="6、保护性暂停超时等待"><a href="#6、保护性暂停超时等待" class="headerlink" title="6、保护性暂停超时等待"></a>6、保护性暂停超时等待</h5><ul><li>在代码中记录了时间差</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Guraede</span> <span class="hljs-variable">guraede</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Guraede</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>            System.out.println(<span class="hljs-string">&quot;创建了一个对象 10秒后赋值&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            guraede.setObject(o);<br>            System.out.println(<span class="hljs-string">&quot;执行了赋值&quot;</span>);<br>        &#125;);<br>        thread.start();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> guraede.getObject(<span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;获取到了对象&quot;</span> + object.hashCode());<br>            &#125;<br>        &#125;);<br>        thread1.start();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Guraede</span>&#123;<br>    <span class="hljs-keyword">private</span> Object object;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(<span class="hljs-type">long</span> time)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了获取线程&quot;</span>);<br>        <span class="hljs-comment">// 记录开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begingTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">speedTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-keyword">while</span> (object == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;循环等待&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (speedTime &gt;= time)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;时间太久了我不等了&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-built_in">this</span>.wait(time - speedTime);<br>                    <span class="hljs-comment">//循环等待</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                speedTime = System.currentTimeMillis() - begingTime;<br>                System.out.println(<span class="hljs-string">&quot;经历的时间&quot;</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;拿到值了&quot;</span>);<br>            <span class="hljs-keyword">return</span> object;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObject</span><span class="hljs-params">(Object object)</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-built_in">this</span>.object = object;<br>            <span class="hljs-built_in">this</span>.notifyAll();<br>            System.out.println(<span class="hljs-string">&quot;唤醒等待线程&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="7、join的原理"><a href="#7、join的原理" class="headerlink" title="7、join的原理"></a>7、join的原理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">(<span class="hljs-type">long</span> millis)</span><br>    <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (millis &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;timeout value is negative&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (millis == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">while</span> (isAlive()) &#123;<br>                wait(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (isAlive()) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> millis - now;<br>                <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                wait(delay);<br>                now = System.currentTimeMillis() - base;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>Join底层就是采用了保护性暂停的原理</li></ul><h5 id="8、邮递员问题，多个生产者和消费者之间共享一个gurade对象比较困难-保护性暂停的一一对应"><a href="#8、邮递员问题，多个生产者和消费者之间共享一个gurade对象比较困难-保护性暂停的一一对应" class="headerlink" title="8、邮递员问题，多个生产者和消费者之间共享一个gurade对象比较困难,保护性暂停的一一对应"></a>8、邮递员问题，多个生产者和消费者之间共享一个gurade对象比较困难,保护性暂停的一一对应</h5><ul><li>创建一个保护类<strong>GuardedObject</strong>，用来传递消息监听消息获得情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuardedObject</span> &#123;<br>    <span class="hljs-comment">// 保护对象类 保护对象类就负责判断对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> Object object;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">long</span> time)</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">passTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (object == <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;开始等待&quot;</span>);<br>                <span class="hljs-keyword">if</span> (passTime &gt;= time)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (passTime == <span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-built_in">this</span>.wait(time);<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">this</span>.wait(passTime - time);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                passTime = System.currentTimeMillis() - beginTime;<br>            &#125;<br>            <span class="hljs-keyword">return</span> object;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(Object object)</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-built_in">this</span>.object = object;<br>            <span class="hljs-built_in">this</span>.notifyAll();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建一个管理类，用来管理这些保护的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Managerment</span> &#123;<br>    <span class="hljs-comment">// 管理类用来管理所有的保护对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer,GuardedObject&gt; managerment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 定义一个获取ID的方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getid</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> id++;<br>    &#125;<br>    <span class="hljs-comment">// 定义一个获取GuardeObject的方法</span><br>    <span class="hljs-keyword">public</span> GuardedObject <span class="hljs-title function_">getGuardeObject</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">guardedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuardedObject</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> getid();<br>        managerment.put(id,guardedObject);<br>        <span class="hljs-keyword">return</span> guardedObject;<br>    &#125;<br>    <span class="hljs-comment">// 获取所有的ID</span><br>    <span class="hljs-keyword">public</span> Set&lt;Integer&gt; <span class="hljs-title function_">getkeyList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> managerment.keySet();<br>    &#125;<br>    <span class="hljs-comment">// 根据id获取Guarded</span><br>    <span class="hljs-keyword">public</span> GuardedObject <span class="hljs-title function_">getguardetByID</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> managerment.get(id);<br>    &#125;<br>    <span class="hljs-comment">// 根据Valud获取id</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIdByObj</span><span class="hljs-params">(GuardedObject guardedObject)</span>&#123;<br>        Set&lt;Integer&gt; integers = managerment.keySet();<br>        <span class="hljs-keyword">for</span> (Integer i:integers<br>             ) &#123;<br>            <span class="hljs-keyword">if</span> (managerment.get(i) == guardedObject)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建一个生产者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">producter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> mailId;<br>    <span class="hljs-keyword">private</span>  Object message;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">producter</span><span class="hljs-params">(<span class="hljs-type">int</span> mailId,Object message)</span>&#123;<br>        <span class="hljs-built_in">this</span>.mailId = mailId;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Managerment</span> <span class="hljs-variable">managerment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Managerment</span>();<br>        System.out.println(<span class="hljs-built_in">this</span>.mailId + <span class="hljs-string">&quot;送信了&quot;</span>);<br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">guardedObject</span> <span class="hljs-operator">=</span> managerment.getguardetByID(<span class="hljs-built_in">this</span>.mailId);<br>        guardedObject.set(<span class="hljs-built_in">this</span>.message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>创建一个消费者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">// 定义一个生产者线程</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Managerment</span> <span class="hljs-variable">managerment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Managerment</span>();<br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">guardeObject</span> <span class="hljs-operator">=</span> managerment.getGuardeObject();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idByObj</span> <span class="hljs-operator">=</span> managerment.getIdByObj(guardeObject);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> guardeObject.get(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">if</span> (message != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(idByObj + <span class="hljs-string">&quot;手到了数据&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(idByObj + <span class="hljs-string">&quot;没送到我不要了&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>主测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;=<span class="hljs-number">3</span>;i++)&#123;<br>            <span class="hljs-comment">// 先启动二十个消费者</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">consumer</span>().start();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;邮递员开始送信&quot;</span>);<br>        <span class="hljs-type">Managerment</span> <span class="hljs-variable">managerment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Managerment</span>();<br>        Set&lt;Integer&gt; integers = managerment.getkeyList();<br>        <span class="hljs-keyword">for</span> (Integer i:integers<br>             ) &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">producter</span>(i,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()).start();<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上的案例描述了一个典型的一个生产者对应一个消费者的管理模式，能够保证多个生产者和多个消费者一一对应的关系，保证其每一格对应在拿到消息后在执行接下来的工作了</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java并发编程</tag>
      
      <tag>学习笔记</tag>
      
      <tag>多线程</tag>
      
      <tag>并发</tag>
      
      <tag>保护暂停模式</tag>
      
      <tag>多线程设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发编程实战学习笔记（四）</title>
    <link href="/2021/12/24/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/12/24/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Java并发编程实战-锁的原理"><a href="#Java并发编程实战-锁的原理" class="headerlink" title="Java并发编程实战-锁的原理"></a>Java并发编程实战-锁的原理</h3><p>在并发编程中，问题出现在多个线程访问共享变量的时候</p><p>在一段代码的执行块内，如果存在对共享变量的操作，如果当某个计算的正确性取决于多个线程的交替执行时序时，那么就会发生竞态条件，换句话说，就是正确的结果无法预知，为了避免临界区的静态条件发生，有多种办法可以达到目的</p><ul><li>阻塞式 Sychronized Lock</li><li>非阻塞式 原子变量</li></ul><h5 id="1、Sychronized对象锁"><a href="#1、Sychronized对象锁" class="headerlink" title="1、Sychronized对象锁"></a>1、Sychronized对象锁</h5><p>sychronized是对象锁，采用互斥的方式，在同一时刻至多有一个对象能够执行对象锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>            <span class="hljs-comment">// 临界区</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>sycharonized锁住了临界区的代码</p><p><strong>著名问题：Sychronize加在方法上和加在类上分别锁住了什么</strong></p><p>如果synchronized加在一个类的普通方法上，那么相当于synchronized(this)。</p><p>如果synchronized加载一个类的静态方法上，那么相当于synchronized(Class对象)。</p><p><strong>成员变量和静态变量是否线程安全</strong></p><ul><li>如果没有共享，就线程安全</li><li>如果共享了就要看他们的状态是否可以被修改</li></ul><p><strong>局部变量是否线程安全</strong></p><ul><li>局部变量是线程安全的</li><li>局部变量引用的对象未必线程安全<ul><li>如果对象没有逃离局部变量的作用域那么他是安全的，如果逃离了作用域那么就是不安全的了，例如return</li></ul></li></ul><p><strong>常见的线程安全类：String Interager Stringbuffer Random Hashtable JUC包下的类</strong></p><h5 id="2、Sychronized底层原理及Monitor的概念"><a href="#2、Sychronized底层原理及Monitor的概念" class="headerlink" title="2、Sychronized底层原理及Monitor的概念"></a>2、Sychronized底层原理及Monitor的概念</h5><p>在32位的虚拟机中，对象头占64位，8个字节</p><ul><li>普通对象</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">|<span class="hljs-params">--------------------------------------------------------------</span>|<br>|<span class="hljs-params">                     Object Header (64 bits)                  </span>|<br>|<span class="hljs-params">------------------------------------</span>|-------------------------|<span class="hljs-params"></span><br><span class="hljs-params"></span>|        Mark Word (<span class="hljs-number">32</span> bits)         |<span class="hljs-params">    Klass Word (32 bits) </span>|<br>|<span class="hljs-params">------------------------------------</span>|-------------------------|<span class="hljs-params"></span><br></code></pre></td></tr></table></figure><ul><li>数组对象</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">|<span class="hljs-params">---------------------------------------------------------------------------------</span>|<br>|<span class="hljs-params">                                 Object Header (96 bits)                         </span>|<br>|<span class="hljs-params">--------------------------------</span>|-----------------------|<span class="hljs-params">------------------------</span>|<br>|<span class="hljs-params">        Mark Word(32bits)       </span>|    Klass Word(32bits) |<span class="hljs-params">  array length(32bits)  </span>|<br>|<span class="hljs-params">--------------------------------</span>|-----------------------|<span class="hljs-params">------------------------</span>|<br></code></pre></td></tr></table></figure><p><strong>Klassword代表指向的对象的地址</strong></p><p><strong>markword用来存储对象运行时需要的信息</strong></p><p>每个Java对象都会去关联一个Monitor对象，如果使用sychronized给对象上锁之后，该对象的markword就会被设为Monitor对象的指针</p><ul><li>线程执行被sychronized所著的代码的时候，会尝试的将markword与monitor对象进行关联</li></ul><h5 id="3、Markword的结构"><a href="#3、Markword的结构" class="headerlink" title="3、Markword的结构"></a>3、Markword的结构</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby">|<span class="hljs-params">--------------------------------------------------------</span>|--------------------|<span class="hljs-params"></span><br><span class="hljs-params"></span>|                  Mark Word (<span class="hljs-number">32</span> bits)                   |<span class="hljs-params">       State        </span>|<br>|<span class="hljs-params">--------------------------------------------------------</span>|--------------------|<span class="hljs-params"></span><br><span class="hljs-params"></span>| <span class="hljs-symbol">identity_hashcode:</span><span class="hljs-number">25</span> |<span class="hljs-params"> age:4 </span>| <span class="hljs-symbol">biased_lock:</span><span class="hljs-number">0</span> |<span class="hljs-params"> lock:01 </span>|       Normal       |<span class="hljs-params"></span><br><span class="hljs-params"></span>|--------------------------------------------------------|<span class="hljs-params">--------------------</span>|<br>|<span class="hljs-params">  thread:23 </span>| <span class="hljs-symbol">epoch:</span><span class="hljs-number">2</span> |<span class="hljs-params"> age:4 </span>| <span class="hljs-symbol">biased_lock:</span><span class="hljs-number">1</span> |<span class="hljs-params"> lock:01 </span>|       Biased       |<span class="hljs-params"></span><br><span class="hljs-params"></span>|--------------------------------------------------------|<span class="hljs-params">--------------------</span>|<br>|<span class="hljs-params">               ptr_to_lock_record:30          </span>| <span class="hljs-symbol">lock:</span><span class="hljs-number">00</span> |<span class="hljs-params"> Lightweight Locked </span>|<br>|<span class="hljs-params">--------------------------------------------------------</span>|--------------------|<span class="hljs-params"></span><br><span class="hljs-params"></span>|               <span class="hljs-symbol">ptr_to_heavyweight_monitor:</span><span class="hljs-number">30</span>  |<span class="hljs-params"> lock:10 </span>| Heavyweight Locked |<span class="hljs-params"></span><br><span class="hljs-params"></span>|--------------------------------------------------------|<span class="hljs-params">--------------------</span>|<br>|<span class="hljs-params">                                              </span>| <span class="hljs-symbol">lock:</span><span class="hljs-number">11</span>  |<span class="hljs-params">    Marked <span class="hljs-keyword">for</span> GC   </span>|<br>|<span class="hljs-params">--------------------------------------------------------</span>|--------------------|<span class="hljs-params"></span><br></code></pre></td></tr></table></figure><p>markword主要用来存储对象运行时的一些数据，例如hashcode，分带年龄等</p><p>各部分的含义如下</p><ul><li><strong>identity_hashcode</strong>：代表hashcode</li><li><strong>age</strong>：代表分代区年龄</li><li><strong>biased_lock</strong>：代表是否为偏向锁，为1时代表启用偏向锁，为0时代表没有启用偏向锁</li><li><strong>thread</strong>：代表现成的ID，当启用偏向锁时，需要记录偏向线程的ID</li><li><strong>epoch</strong>：偏向时间戳</li><li><strong>ptr_to_lock_record</strong>：指向栈中锁记录的指针</li><li><strong>ptr_to_heavyweight_monitor</strong>：只想Monitor记录的指针</li></ul><table><thead><tr><th align="left">biased_lock</th><th align="left">lock</th><th align="left">状态</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">01</td><td align="left">无锁</td></tr><tr><td align="left">1</td><td align="left">01</td><td align="left">偏向锁</td></tr><tr><td align="left">0</td><td align="left">00</td><td align="left">轻量级锁</td></tr><tr><td align="left">0</td><td align="left">10</td><td align="left">重量级锁</td></tr><tr><td align="left">0</td><td align="left">11</td><td align="left">GC标记</td></tr></tbody></table><h5 id="4、Monitor的原理"><a href="#4、Monitor的原理" class="headerlink" title="4、Monitor的原理"></a>4、Monitor的原理</h5><p>monitor：监视器 管程</p><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/monitor%E5%8E%9F%E7%90%86.png"></p><ul><li>初始状态的时候monitor的owner是空的</li><li>当线程1执行临界区的代码时，与obj关联的mointor对象的owner设置为t2进程的ID，此时，obj对象头中的信息变为</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">|<span class="hljs-params">               ptr_to_heavyweight_monitor:30  </span>| <span class="hljs-symbol">lock:</span><span class="hljs-number">2</span> |<span class="hljs-params"> Heavyweight Locked </span>|<br></code></pre></td></tr></table></figure><p>对象头中存放的是关联的monitor的地址，Lock变为10</p><ul><li><p>当线程2来的时候，首先看对象管理的monitor中的obwner是否为空，如果有主任了，那么就进入Enterlist当中阻塞进行等待</p></li><li><p>当线程1结束后，owner会叫醒处于enterlist当中的线程，然后他们开始进行锁竞争，获取锁</p></li><li><p>waitset是之前获得过锁，但是不满足执行状态的，会被放入waitset集合中去</p></li></ul><h5 id="5、轻量级锁"><a href="#5、轻量级锁" class="headerlink" title="5、轻量级锁"></a>5、轻量级锁</h5><p>如果我们每次都是用重量级锁，那么上下文切换的成本太高了，这时候可以引入轻量级锁</p><ul><li>使用场景：如果一个对象虽然有多线程进行访问，但多线程的访问是错开的，没有竞争，可以使用轻量级锁来进行优化</li><li>轻量级锁对于使用者是透明的，依然是cychronized语法</li></ul><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81.png"></p><ul><li>首先线程所著的对象中存放了对象头和对象体的信息，当我们线程执行时候，会创建一个栈帧，栈帧中会添加一条锁记录Lockrecord，锁记录中存放的信息有Lockrecord存放的是对象的markword的信息，Object reference存放的是引用的对象的信息</li></ul><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/%E5%8A%A0%E4%B8%8A%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png"></p><ul><li>首先，会创建一条锁记录，锁记录的lockrecord会与对象中的markword交换信息，代表给他加上轻量级锁，将锁的最后变为00，其对象头变成了锁记录的地址，来表示加的是轻量级锁，如果锁替换成功，那么将会是如下情况</li></ul><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/%E6%9B%BF%E6%8D%A2%E6%88%90%E5%8A%9F.png"></p><ul><li>如果ca失败了会有两种情况<ul><li>第一种就是已经有其他的锁修改了对象的markword，让其变成了00，这表明出现了竞争，进入了锁膨胀的过程</li><li>第二种是自己进行了suchronized锁重入，那么就会在加一条锁，那么会创建一条新的锁记录</li></ul></li></ul><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E9%87%8D%E5%85%A5.png"></p><ul><li><p>如何发生了锁重入，那么替换的时候就会制空</p></li><li><p>解锁</p><ul><li>当线程2执行完毕时，锁记录，如果有为空的情况出现，则锁记录-1</li><li>当锁记录不为null了就进行还原的操作<ul><li>如果解锁过程成功则解锁成功</li><li>如果解锁失败，则代表已经进入了重量级锁，进入重量级锁的解锁流程</li></ul></li></ul></li></ul><h5 id="6、锁膨胀"><a href="#6、锁膨胀" class="headerlink" title="6、锁膨胀"></a>6、锁膨胀</h5><p>在轻量级锁中，如果出现了竞争，那么会升级成为重量级锁，这个过程叫做锁膨胀</p><ul><li>当线程1走正常的轻量级锁加锁流程的时候成功获取了锁执行正常的任务代码</li><li>此时线程2开始竞争锁，发现加锁失败，进入锁膨胀的过程<ul><li>为object申请重量级锁，即让object的markword指向重量级锁的地址</li><li>自己进入entryList中</li></ul></li></ul><h5 id="7、自旋"><a href="#7、自旋" class="headerlink" title="7、自旋"></a>7、自旋</h5><p>在重量级锁竞争的时候，如果没有竞争到锁，先不进入阻塞，而是循环几次，如果期间获取到了锁就不进入阻塞队列</p><p>Java7之后就不能控制是否开启自旋的功能</p><h5 id="8、偏向锁"><a href="#8、偏向锁" class="headerlink" title="8、偏向锁"></a>8、偏向锁</h5><p>轻量级锁在没有竞争的时候，每次都要进行cas操作，java在java6引入了偏向锁的概念</p><p>只有第一个cad将线程ID设置到了对象的markword头之后，只要不发生竞争，对象就是线程专用的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby">|<span class="hljs-params">--------------------------------------------------------</span>|--------------------|<span class="hljs-params"></span><br><span class="hljs-params"></span>|                  Mark Word (<span class="hljs-number">32</span> bits)                   |<span class="hljs-params">       State        </span>|<br>|<span class="hljs-params">--------------------------------------------------------</span>|--------------------|<span class="hljs-params"></span><br><span class="hljs-params"></span>| <span class="hljs-symbol">identity_hashcode:</span><span class="hljs-number">25</span> |<span class="hljs-params"> age:4 </span>| <span class="hljs-symbol">biased_lock:</span><span class="hljs-number">0</span> |<span class="hljs-params"> lock:01 </span>|       Normal       |<span class="hljs-params"></span><br><span class="hljs-params"></span>|--------------------------------------------------------|<span class="hljs-params">--------------------</span>|<br>|<span class="hljs-params">  thread:23 </span>| <span class="hljs-symbol">epoch:</span><span class="hljs-number">2</span> |<span class="hljs-params"> age:4 </span>| <span class="hljs-symbol">biased_lock:</span><span class="hljs-number">1</span> |<span class="hljs-params"> lock:01 </span>|       Biased       |<span class="hljs-params"></span><br><span class="hljs-params"></span>|--------------------------------------------------------|<span class="hljs-params">--------------------</span>|<br>|<span class="hljs-params">               ptr_to_lock_record:30          </span>| <span class="hljs-symbol">lock:</span><span class="hljs-number">00</span> |<span class="hljs-params"> Lightweight Locked </span>|<br>|<span class="hljs-params">--------------------------------------------------------</span>|--------------------|<span class="hljs-params"></span><br><span class="hljs-params"></span>|               <span class="hljs-symbol">ptr_to_heavyweight_monitor:</span><span class="hljs-number">30</span>  |<span class="hljs-params"> lock:10 </span>| Heavyweight Locked |<span class="hljs-params"></span><br><span class="hljs-params"></span>|--------------------------------------------------------|<span class="hljs-params">--------------------</span>|<br>|<span class="hljs-params">                                              </span>| <span class="hljs-symbol">lock:</span><span class="hljs-number">11</span>  |<span class="hljs-params">    Marked <span class="hljs-keyword">for</span> GC   </span>|<br>|<span class="hljs-params">--------------------------------------------------------</span>|--------------------|<span class="hljs-params"></span><br></code></pre></td></tr></table></figure><p>偏向状态</p><ul><li>当一个对象创建的时候是一个正常，后三位是001</li><li>偏向锁是延迟的，避免延迟可以设置JVM参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">//关闭延迟开启偏向锁<br>-XX:BiasedLockingStartupDelay=0<br>//禁止偏向锁<br>-XX:-UseBiasedLocking <br>//启用偏向锁<br>-XX:+UseBiasedLocking <br></code></pre></td></tr></table></figure><ul><li>.hsahcode方法可以撤销偏向锁</li><li>其他线程使用了对象就会撤销偏向锁，变成轻量级锁</li></ul><p>撤销偏向</p><ul><li>其他线程使用对象</li><li>调用wait&#x2F;notify也会锁升级</li></ul><h5 id="9、撤销重偏向"><a href="#9、撤销重偏向" class="headerlink" title="9、撤销重偏向"></a>9、撤销重偏向</h5><ul><li>如果连续多次冲偏向后，jvm会自动取消冲偏向</li></ul><h5 id="10、批量撤销"><a href="#10、批量撤销" class="headerlink" title="10、批量撤销"></a>10、批量撤销</h5><ul><li>阈值超过40次后会锁会变成不可偏向的状态</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java并发编程</tag>
      
      <tag>学习笔记</tag>
      
      <tag>多线程</tag>
      
      <tag>并发</tag>
      
      <tag>sychronized</tag>
      
      <tag>锁的原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发编程实战学习笔记（三）</title>
    <link href="/2021/12/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/12/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Java并发编程实战-线程状态"><a href="#Java并发编程实战-线程状态" class="headerlink" title="Java并发编程实战-线程状态"></a>Java并发编程实战-线程状态</h3><h4 id="1、守护线程和主线程"><a href="#1、守护线程和主线程" class="headerlink" title="1、守护线程和主线程"></a>1、守护线程和主线程</h4><p>默认默认情况下，Java主线程需要等待所有的线程都运行结束才会结束，有一种线程叫做守护线程，只要其他非守护线程运行结束了，即使守护线程的代码没有执行完，也会被强制结束</p><p>主线程会等待所有的线程运行结束才会停止运行</p><p>在Java中有两类线程，即用户线程和守护线程</p><p>任何一个守护线程都是整个JVM中所有非守护线程的保姆</p><p>只要当前JVM实例中存在任何一个非守护线程没有结束，守护线程就全部工作，只有当最后一个非守护线程结束工作时，守护线程才会结束工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;守护线程执行工作中&quot;</span>);<span class="hljs-comment">//模拟工作</span><br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">30</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>        thread.setDaemon(<span class="hljs-literal">true</span>);<br>        thread.start();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">10</span>);<br>                System.out.println(<span class="hljs-string">&quot;我结束了&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-number">123</span>);<br>        thread1.start();<br></code></pre></td></tr></table></figure><p>代码现象：thread线程休眠30s，线程2休眠10秒，线程1设置为守护线程，当线程2十秒结束后，线程1直接结束</p><h5 id="2、线程的五种状态"><a href="#2、线程的五种状态" class="headerlink" title="2、线程的五种状态"></a>2、线程的五种状态</h5><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BA%94%E7%A7%8D%E7%8A%B6%E6%80%81.png"></p><h5 id="3、线程的六种状态"><a href="#3、线程的六种状态" class="headerlink" title="3、线程的六种状态"></a>3、线程的六种状态</h5><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%85%AD%E7%A7%8D%E7%8A%B6%E6%80%81.png"></p><p>在Java层面，线程共有六种状态，分别是New、Runable、Terminated三个状态，这三个状态按照顺序执行从上到下，不可逆转</p><p>在Runaable中有三个状态，分别是Block阻塞，wait无限等待和timewaiting有限等待</p><p>从Runable到Timewaiting状态是由于调用了sleep方法或者wait方法睡眠了有限的时间后并且获取到了锁就进入runable状态，否则进入block状态</p><p>从Runable到waiting状态是由于调用了wait或者sleep方法，若被唤起且获得了锁后可以回到Runable否则进去Blocak</p><p>从Runable到Block很简单，就是获取了锁就可以恢复了</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java并发编程</tag>
      
      <tag>学习笔记</tag>
      
      <tag>多线程</tag>
      
      <tag>并发</tag>
      
      <tag>线程状态基本知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发编程实战学习笔记（二）</title>
    <link href="/2021/12/22/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/12/22/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Java并发编程实战-线程的API"><a href="#Java并发编程实战-线程的API" class="headerlink" title="Java并发编程实战-线程的API"></a>Java并发编程实战-线程的API</h3><h5 id="1、star-和-run"><a href="#1、star-和-run" class="headerlink" title="1、star 和 run"></a>1、star 和 run</h5><ul><li>star是开启一个线程的run功能</li><li>run只是执行一个线程的方法，如果直接开启run的话还是单线程运行的</li></ul><h5 id="2、sleep和yield"><a href="#2、sleep和yield" class="headerlink" title="2、sleep和yield"></a>2、sleep和yield</h5><ul><li>sleep方法是让线程休眠，线程从Runable进入Timewating状态</li><li>yield方法是让出当前线程，会让线程从Runing进入Runable状态</li></ul><p>调用其他现成的inerput方法会叫醒正在睡眠的线程</p><p><strong>设置线程优先级</strong>：setPriority</p><p><strong>sleep的应用：防止cpu占用100%</strong></p><h5 id="3、join"><a href="#3、join" class="headerlink" title="3、join"></a>3、join</h5><ul><li>等待线程运行结束</li><li>需要等待解雇后继续运行的就是同步，不需要等待结果后续运行的就是异步</li><li>join(n)设置最大等待时间，单位毫秒</li></ul><h5 id="4、interrput详解"><a href="#4、interrput详解" class="headerlink" title="4、interrput详解"></a>4、interrput详解</h5><ul><li><p>打断sleep、wait、join的线程</p></li><li><p>interrput可以打断处于阻塞状态的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">thread.isInterruput()<br></code></pre></td></tr></table></figure><p><strong>正常的线程被打断时候，会返回true，正在睡眠的线程被打断时会返回false</strong></p></li><li><p>interrput可以优雅的终止线程</p></li></ul><h6 id="多线程设计模式-两阶段终止模式"><a href="#多线程设计模式-两阶段终止模式" class="headerlink" title="多线程设计模式-两阶段终止模式"></a>多线程设计模式-两阶段终止模式</h6><p>两阶段终止模式，如何优雅的在T1线程中终止T2线程</p><p>如果直接使用stop会导致没有释放锁，如果锁住了共享资源，那么再也没有机会去释放锁，其他线程永远无法获取锁</p><p>循环的成立条件是程序没有被打断，如果被打断了，那么打断标记会被设置为true，但是如果在睡眠状态中被打断，不会变为真，但是会抛出异常，我们只需要重新设置打断标记，那么下一次就可以进行料理后事了</p><p><img src="https://wodebokea.oss-cn-beijing.aliyuncs.com/img/%E4%B8%A4%E9%98%B6%E6%AE%B5%E7%BB%88%E6%AD%A2.png"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 两阶段终止模式，在一个线程t1中如何优雅的打断T2</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">if</span>(Thread.currentThread().isInterrupted())&#123;<br>                    System.out.println(<span class="hljs-string">&quot;执行处理后事的代码&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>                        System.out.println(<span class="hljs-string">&quot;执行监控记录&quot;</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;在睡眠的时候被打断了&quot;</span>);<br>                        Thread.currentThread().interrupt();<span class="hljs-comment">// 手动打断</span><br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>        t1.start();<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">4</span>);<br>        t1.interrupt(); <span class="hljs-comment">// 打断线程</span><br></code></pre></td></tr></table></figure><h5 id="5、park"><a href="#5、park" class="headerlink" title="5、park"></a>5、park</h5><ul><li>park类似于程序的断点，程序会卡住</li><li>调用interput方法后，程序会继续运行，但是在此方法后，park会失效</li><li>这是一个不推荐的方法，会破坏同步代码块，造成死锁</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java并发编程</tag>
      
      <tag>学习笔记</tag>
      
      <tag>多线程</tag>
      
      <tag>并发</tag>
      
      <tag>线程的API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发编程实战学习笔记（一）</title>
    <link href="/2021/12/21/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/12/21/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Java并发编程-线程的基础知识"><a href="#Java并发编程-线程的基础知识" class="headerlink" title="Java并发编程-线程的基础知识"></a>Java并发编程-线程的基础知识</h3><h5 id="1、进程和线程"><a href="#1、进程和线程" class="headerlink" title="1、进程和线程"></a>1、进程和线程</h5><ul><li><p>什么是进程</p><p>进程是由指令和数据构成的，但是这些命令要执行必须下发到CPU当中去，为数据加载到内存当中去，在指令运行的国中中还需要动用磁盘网络设备，进程就是用来加载指令、管理内存、管理IO的</p><p>当一个程序被运行时，从磁盘加载程序的代码到内存中的时候，就开启了一个进程</p><p>进程可以视为程序的一个实例，大部分程序可以同时运行多个实例进程</p></li><li><p>什么是线程</p><p>一个进程之间可以有多个线程，线程就是一个指令流</p></li><li><p>二者对比</p><p>进程之间是相互独立的，而线程是存在进程内的，是进程的一个子集</p><p>进程之间拥有共享的资源，例如内存空间，供内部线程共享</p><p>进程之间的通信非常复杂</p><p>线程之间的通信比较简单</p></li></ul><h5 id="2、并行和并发的区别"><a href="#2、并行和并发的区别" class="headerlink" title="2、并行和并发的区别"></a>2、并行和并发的区别</h5><ul><li><p>并行</p><p>并行是同一时间做多个事情的能力</p></li><li><p>并发</p><p>并发同一时间应多多件事情的能力</p></li></ul><h5 id="3、Java创建线程的方式"><a href="#3、Java创建线程的方式" class="headerlink" title="3、Java创建线程的方式"></a>3、Java创建线程的方式</h5><ul><li>使用Thread类，继承Thread类重新Run方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-comment">// 创建线程的方式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">threadClass</span>().start();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">threadClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用Runable接口，利用Thread类实现线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了一个线程的代码&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnable);<br>thread.start();<br></code></pre></td></tr></table></figure><p>匿名内部类可以使用Lambad表达式优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;这是一个线程&quot;</span>);<br>&#125;, <span class="hljs-string">&quot;threaName&quot;</span>);<br>thread1.start();<br></code></pre></td></tr></table></figure><ul><li>FutureTask配合Thread类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">FutureTask&lt;Integer&gt; integerFutureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(integerFutureTask);<br>integerFutureTask.get();<br></code></pre></td></tr></table></figure><h5 id="4、查看线程的方法"><a href="#4、查看线程的方法" class="headerlink" title="4、查看线程的方法"></a>4、查看线程的方法</h5><ul><li>Windows<ul><li>任务管理器</li><li>TaskList</li><li>taskkill</li></ul></li><li>Linux<ul><li>ps -ef</li><li>kill</li></ul></li></ul><h5 id="5、线程运行的原理"><a href="#5、线程运行的原理" class="headerlink" title="5、线程运行的原理"></a>5、线程运行的原理</h5><p>暂时没总结 还没搞懂</p><h5 id="6、线程上下文切换"><a href="#6、线程上下文切换" class="headerlink" title="6、线程上下文切换"></a>6、线程上下文切换</h5><p>线程上下文切换是因为一些原因导致CPU不在执行当前的线程，转而执行另一个线程的代码，线程上下文切换的原因有很多，包括</p><ul><li>线程的CPU时间片用完</li><li>垃圾回收</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了sleep、yield、wait、join、park、syschronizd、lock等方法</li></ul><p>当context switch发生时候，需要由操作系统保存当前线程的执行状态，并且恢复另一个线程的状态，Java中对应的就是程序计数器，它的作用是保存下一条JVM指令的执行地址，是线程私有的</p><p>要保存的信息有</p><ul><li>程序计数器</li><li>虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</li></ul><p>上下文切换会消耗程序性能，<strong>线程数超过CPU核心的线程数</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java并发编程</tag>
      
      <tag>学习笔记</tag>
      
      <tag>多线程</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度云Api与SpringBoot实现的人脸识别登录功能</title>
    <link href="/2021/09/21/%E7%99%BE%E5%BA%A6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABAPI/"/>
    <url>/2021/09/21/%E7%99%BE%E5%BA%A6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABAPI/</url>
    
    <content type="html"><![CDATA[<h4 id="百度云Api与SpringBoot实现的人脸识别登录功能"><a href="#百度云Api与SpringBoot实现的人脸识别登录功能" class="headerlink" title="百度云Api与SpringBoot实现的人脸识别登录功能"></a>百度云Api与SpringBoot实现的人脸识别登录功能</h4><p><strong>任何问题都可通过bilibli私信我，虽然我很菜，但是很乐意解答</strong><br><a href="https://space.bilibili.com/97483909">bilibli</a><br>项目中非常重要的gettoken的方法中AK与SK需要自己从百度云人脸识别库获取（代码中删去了这部分）</p><h4 id="1、项目简介"><a href="#1、项目简介" class="headerlink" title="1、项目简介"></a>1、项目简介</h4><p>项目中使用了SpringBoot+Thymleaf+百度云的API接口实现的人脸识别功能，其中融合了人脸库的管理功能，实现对人脸的增删改查。<br>对于原生的百度云API文档可以点击下载<br><a href="https://githubpicture.oss-cn-beijing.aliyuncs.com/FACE.pdf">点击下载百度云API官方文档–32M</a><br>项目演示和流程介绍可参考视频<br><a href="https://www.bilibili.com/video/av93519949#reply2469727748">视频演示</a><br><img src="https://githubpicture.oss-cn-beijing.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20200304214346.png?ynotemdtimestamp=1652771803320" alt="image"><br><img src="https://githubpicture.oss-cn-beijing.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20200304214430.png?ynotemdtimestamp=1652771803320" alt="image"><br><img src="https://githubpicture.oss-cn-beijing.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20200304215800.png?ynotemdtimestamp=1652771803320" alt="image"><br><img src="https://githubpicture.oss-cn-beijing.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20200304214510.png?ynotemdtimestamp=1652771803320" alt="image"></p><h4 id="2、接口方法"><a href="#2、接口方法" class="headerlink" title="2、接口方法"></a>2、接口方法</h4><p>Face包下的的BaiduAiFace类是整个核心功能的接口<br><strong>FaceRegistration</strong> 方法为人脸注册<br><strong>FaceUpdate</strong> 方法为人脸更新<br><strong>FindPersonFaceList</strong> 方法为查询人脸信息<br><strong>FindGroupList</strong> 为查询本组的面部信息<br><strong>DelPersonFace</strong> 为删除人脸<br><strong>FaceSearch</strong> 为查找人脸</p><h4 id="3、接口参数"><a href="#3、接口参数" class="headerlink" title="3、接口参数"></a>3、接口参数</h4><p>对于每个参数的具体含义与提要提供的参数参考百度云官方文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Setingmodel</span> &#123;<br>    <span class="hljs-keyword">private</span> String imgpath;<br>    <span class="hljs-keyword">private</span> String GroupID;<br>    <span class="hljs-keyword">private</span> String UserID;<br>    <span class="hljs-keyword">private</span> String Quality_Control;<br>    <span class="hljs-keyword">private</span> String Image_Type;<br>    <span class="hljs-keyword">private</span> String Liveness_Control;<br>    <span class="hljs-keyword">private</span> String Userinf;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserinf</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Userinf;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserinf</span><span class="hljs-params">(String userinf)</span> &#123;<br>        Userinf = userinf;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Setingmodel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 图片类型</span><br><span class="hljs-comment">         * BASE64:图片的base64值，base64编码后的图片数据，编码后的图片大小不超过2M；</span><br><span class="hljs-comment">         * URL:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)；</span><br><span class="hljs-comment">         * FACE_TOKEN：人脸图片的唯一标识，调用人脸检测接口时</span><br><span class="hljs-comment">         * 会为每个人脸图片赋予一个唯一的FACE_TOKEN</span><br><span class="hljs-comment">         * 同一张图片多次检测得到的FACE_TOKEN是同一个。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.Image_Type = <span class="hljs-string">&quot;BASE64&quot;</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 图片质量控制</span><br><span class="hljs-comment">         * NONE: 不进行控制</span><br><span class="hljs-comment">         * LOW:较低的质量要求</span><br><span class="hljs-comment">         * NORMAL: 一般的质量要求</span><br><span class="hljs-comment">         * HIGH: 较高的质量要求</span><br><span class="hljs-comment">         * 默认 NONE</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.Quality_Control = <span class="hljs-string">&quot;NONE&quot;</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 活体检测控制</span><br><span class="hljs-comment">         * NONE: 不进行控制</span><br><span class="hljs-comment">         * LOW:较低的活体要求(高通过率 低攻击拒绝率)</span><br><span class="hljs-comment">         * NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率)</span><br><span class="hljs-comment">         * HIGH: 较高的活体要求(高攻击拒绝率 低通过率)</span><br><span class="hljs-comment">         * 默认NONE</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.Liveness_Control = <span class="hljs-string">&quot;NONE&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getImgpath</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> imgpath;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImgpath</span><span class="hljs-params">(String imgpath)</span> &#123;<br>        <span class="hljs-built_in">this</span>.imgpath = imgpath;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGroupID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> GroupID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGroupID</span><span class="hljs-params">(String groupID)</span> &#123;<br>        GroupID = groupID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> UserID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserID</span><span class="hljs-params">(String userID)</span> &#123;<br>        UserID = userID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getQuality_Control</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Quality_Control;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setQuality_Control</span><span class="hljs-params">(String quality_Control)</span> &#123;<br>        Quality_Control = quality_Control;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getImage_Type</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Image_Type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImage_Type</span><span class="hljs-params">(String image_Type)</span> &#123;<br>        Image_Type = image_Type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLiveness_Control</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Liveness_Control;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLiveness_Control</span><span class="hljs-params">(String liveness_Control)</span> &#123;<br>        Liveness_Control = liveness_Control;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>人脸识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
